from service.base import BaseService
import hashlib
import config

def _hash(pwd):
    hpwd = hashlib.sha512(str(pwd).encode()).hexdigest() + config.PASSWORD_KEY
    hpwd = hashlib.md5(str(pwd).encode()).hexdigest()
    return hpwd

class UserService(BaseService):
    def __init__(self, db, rs):
        super().__init__(db, rs)

        UserService.inst = self

    def signup(self, data):
        '''
        data(dict): account(str), student_id(str), passwd(str), repasswd(str)
        return id(str)
        '''
        ### check required arguemts
        required_args = ['account', 'student_id', 'passwd', 'repasswd']
        if not self.check_required_args(required_args, data) :
            return ('Etoofewargs', None)
        ### check data valadation
        err = self.check_data_not_empty(data)
        if err:
            return (err, None)
        if data['passwd'] != data['repasswd']:
            return ('Econfirmpwd', None)
        ### check conflict
        res = yield from self.db.execute('SELECT `id` FROM `user` ' 
                'WHERE `account` = %s OR `student_id` = %s', 
                (data['account'], data['student_id'],))
        if len(res) != 0:
            return ('Eexist', None)
        ### gen hashed passwd
        hpasswd = _hash(data['passwd'])
        ### gen sql query
        data['passwd'] = hpasswd
        data.pop('repasswd')
        sql, prama = self.gen_insert_sql('user', data)
        res = yield from self.db.execute(sql, prama)
        res = yield from self.db.execute('SELECT `id` FROM `user` '
                'WHERE `account` = %s',
                (data['account'],))
        if len(res) == 0:
            return ('Ecreate', None)
        id = res[0][0]
        yield from self.db.flush_tables()
        ### clear rs
        self.rs.delete('user@list')
        print(self.rs.get('user@list'))
        return (None, str(id))

    def signin(self, data, req):
        '''
        data(dict): account(str), passwd(str)
        return id(str)
        '''
        ### check required arguemts
        required_args = ['account', 'passwd']
        if not self.check_required_args(required_args, data) :
            return ('Etoofewargs', None)
        ### check data validation
        err = self.check_data_not_empty(data)
        if err:
            return (err, None)
        ### get hashed passwd
        sql = self.gen_select_sql('user', ['passwd', 'id'])
        res = yield from self.db.execute(sql+
                'WHERE `account` = %s;',
                (data['account'],))
        ### check account 
        if len(res) == 0:
            return ('Euser', None)
        hpwd, id = res[0]
        ### check passwd
        if _hash(data['passwd']) != hpwd:
            return ('Epasswd', None)
        req.set_secure_cookie('id', str(id))
        yield from self.db.flush_tables()
        return (None, str(id))

    def change_password(self, data, acct=None):
        '''
        data(dict): id(str), passwd(str), npasswd(str), rnpasswd(str)
        return id(str)
        '''
        ### check required arguemts
        required_args = ['id', 'passwd', 'npasswd', 'rnpasswd']
        if not self.check_required_args(required_args, data) :
            return ('Etoofewargs', None)
        ### check accessible
        if not acct:  
            return ('Elogin', None)
        if str(acct['id']) != data['id']:
            return ('Eaccess', None)
        ### check data validation
        err = self.check_data_not_empty(data)
        if err:
            return (err, None)
        if data['npasswd'] != data['rnpasswd']:
            return ('Enpasswdconfirm', None)
        ### get hashed passwd
        sql = self.gen_select_sql('user', ['passwd', 'account'])
        res = yield from self.db.execute(sql+
                'WHERE `id` = %s;',
                (data['id'],))
        ### check account
        if len(res) == 0:
            return ('Euser', None)
        hpwd = res[0][0]
        ### check passwd
        if _hash(data['passwd']) != hpwd:
            return ('Epasswdconfirm', None)
        ### gen new hashed passwd
        nhpwd = _hash(data['npasswd'])
        ### update passwd
        sql, prama = self.gen_update_sql('user', {'passwd': nhpwd})
        res = yield from self.db.execute(sql+
                'WHERE `id` = %s', 
                prama+(data['id'],))
        yield from self.db.flush_tables()
        return (None, str(data['id']))

    def get_user_info(self, id):
        '''
        id(str)
        return meta(dict)
        '''
        try:
            meta = self.rs.get('user@%d'%int(id))
        except (ValueError, TypeError) as e:
            return ('Eidnotdigits', None)
        except:
            return ('Ers', None)
        if not meta:
            args = ['id', 'account', 'student_id']
            sql = self.gen_select_sql('user', args)
            res = yield from self.db.execute(sql+
                    'WHERE `id` = %s',
                    (id,))
            if len(res) == 0:
                pass
            else:
                meta = self.gen_raw_dict(args, res[0])
                self.rs.setex('user@%d'%int(id), config.DATA_EXPIRE_SECOND, meta)
        if not meta:
            return ('Euser', None)
        return (None, meta)

    def get_user_list(self):
        '''
        return meta([id(str),id(str),...])
        '''
        meta = self.rs.get('user@list')
        meta = None
        if not meta:
            sql = self.gen_select_sql('user', ['id',])
            res = yield from self.db.execute(sql)
            meta = [ str(_[0]) for _ in res ]
            self.rs.setex('user@list', config.DATA_EXPIRE_SECOND, meta)
            print("redis: ", self.rs.get('user@list'))
        return (None, meta)

